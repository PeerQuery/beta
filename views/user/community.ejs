
<!DOCTYPE html>
<html>
<head>
	<title>Community - Peer Query</title>
	
	<!-- Standard Meta -->
	<meta charset="utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

  <!-- Site Properties -->
	<meta name="description" content="">
	<meta property="og:type" content="website">
	<meta property="og:site_name" content="Peer Query">
	<meta property="og:title" content="Peer Query">
	<meta property="og:description" content="">
	<meta property="og:image" content="https://www.peerquery.com/assets/images/peerquery.png">
	<meta property="fb:app_id" content="384491628645652">
	<link rel="icon" type="image/x-icon" href="/assets/img/favicon.ico">
	<meta name="application-name" content="Peer Query">

  
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/semantic.min.css" />
  <link rel="stylesheet" href="/assets/css/custom.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/semantic.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/components/visibility.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/components/sidebar.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.2.13/components/transition.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.8.6/showdown.min.js"></script>
  <script src="/assets/scripts/timeago.js"></script>
  <script src="https://cdn.steemjs.com/lib/latest/steem.min.js"></script>
	<script src="/assets/scripts/sc2.min.js"></script>


</head>
<body>



<section class="navbarSection">
	<% include ../partials/navbar.ejs %>
</section>






<div class="ui container">
	
	<div class="ui feed">
	<div class="event">
	<div class="label">
		<img id="account_img" src="/assets/img/avatar.png">
	</div>
	<div class="content">
		<div class="summary">
			<a id="user_account"></a>
			<div class="date">
				Community
			</div>
			<div class="ui active inline tiny loader" id="spinner1"></div>
		</div>
	</div>
	</div>
	</div>
	
	
	
	
	
	
	<div class="ui dropdown">
		<i class="sidebar icon"></i>
			<div class="text">View</div>
		<i class="dropdown icon"></i>
		<div class="menu">
			<a class="item" id="account_btn">
				<i class="user icon"></i>
				Account
			</a>
			<a class="item" id="feed_btn">
				<i class="rss icon"></i>
				Feed
			</a>
			<a class="item" id="wallet_btn">
				<i class="dollar icon"></i>
				Wallet
			</a>
		</div>
	</div>
	
	
	
	
	
	

	
</div>

	<br/>
	
	<div class="ui divider"></div>
	
	
	<br/><br/>
	
	

<div class="ui stackable grid container">
  
	
	
	<!-- query type menu -->
		<div class="ui four item menu">
			<a class="item active" id="trending" onClick="byComments()">
				<i class="comments icon"></i>
				<span class="desktop-only">Community</span>
			</a>
			<a class="item" id="trending" onClick="byVotes()">
				<i class="dollar icon"></i>
				<span class="desktop-only">Supporters</span>
			</a>
			<a class="item" id="new" onClick="getFollowing()">
				<i class="add user icon"></i>
				<span class="desktop-only">Following</span>
				<span id="following"></span>
			</a>
			<a class="item" id="hot" onClick="getFollowers()">
				<i class="users icon"></i>
				<span class="desktop-only">Followers</span>
				<span id="followers"></span>
			</a>
		</div>
	<!-- end of query type menu -->
 
 
 
 
 
		  <div class="ui container">
		  
		<div class="ui active centered inline loader" id="spinner2" style=""></div>
		
		<div class="ui five small statistics" id="stats" style="visibility:hidden">
		
			<div class="ui small statistic">
			<div class="value">
			<i class="write icon"></i><span id="post-count"></span>
			</div>
			<div class="label">
			Posts
			</div>
			</div>
			
			
			<div class="ui small statistic">
			<div class="value">
			<i class="thumbs outline up icon"></i><span id="vote-count"></span>
			</div>
			<div class="label">
			Votes
			</div>
			</div>
			
			
			<div class="ui small statistic">
			<div class="value">
			<i class="dollar icon"></i><span id="earn-count"></span>
			</div>
			<div class="label">
			Earned
			</div>
			</div>
			
			
			<div class="ui small statistic">
			<div class="value">
			<i class="comments icon"></i><span id="comment-count"></span>
			</div>
			<div class="label">
			Comments
			</div>
			</div>
				
		</div>

  
		<br/><br/>
  
		<div class="ui middle aligned divided list" id="item-container">
		</div>
		
		
		
		
		  </div>
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
 
 
		<div class="row">
			<div class="center aligned column">
				<br/><br/>
				<a class="ui huge button" id="more-btn" style="visibility: hidden" data-author="" data-type="" onClick="loadMore(this)">Load more</a>
			</div>
		</div>
    
  

  
</div>  
  

	<section class="footerSection">
		<% include ../partials/footer.ejs %>
	</section>

  <script>
//

	var converter = new showdown.Converter();
  	
	
	
	var pth = window.location.pathname;
	account = pth.substr(pth.indexOf("@") + 1, pth.indexOf("/community") -2);
	
	//console.log(account);
	var username = account;
	
	document.getElementById("more-btn").dataset.account = account;
	
	
	document.getElementById("wallet_btn").href = "/@" + account + "/wallet";
	document.getElementById("account_btn").href = "/@" + account;
	document.getElementById("feed_btn").href = "/@" + account + "/feed";
	
	
	document.getElementById("user_account").innerText = account.toUpperCase();
	document.getElementById("user_account").href = "/@" + account;
	document.getElementById("account_img").src = "https://img.busy.org/@" + account;
	document.getElementById('account_img').onerror = function() {this.src='/assets/img/avatar.png'; this.onerror='';};
	

//----------
  
	steem.api.getFollowCount(account, function(err, result) {
		//console.log(err, result);
		document.getElementById("followers").innerText = "(" + result.follower_count.toLocaleString() + ")";
		document.getElementById("following").innerText = "(" + result.following_count.toLocaleString() + ")";
		
  		document.getElementById("spinner1").style.visibility = "hidden";
	});
	

//----------

function byVotes() {
			
			document.getElementById("stats").style.visibility = "hidden";
			document.getElementById("more-btn").style.visibility = "hidden";
			document.getElementById("spinner2").style.display = "block";
			document.getElementById("item-container").innerHTML = "";
	
	
	steem.api.getDiscussionsByAuthorBeforeDate(username, null, '2100-01-01T00:00:00', 10, function(err, result) {
		//console.log(err, result);
		
		document.getElementById("post-count").innerText = result.length;
		
		var postvoters = [];
	
		
		//console.log(post);
		
		var comments = 0;
		var earned = 0;
		var votes = 0;
		
		for (i in result) {
			
			var post = result[i];
		
			for (x in post.active_votes) {
				postvoters.push(post.active_votes[x].voter);
			}
			
			
			earned = earned + Math.max(Number(post.pending_payout_value.split(' ')[0]), Number(post.total_payout_value.split(' ')[0]) + Number(post.curator_payout_value.split(' ')[0]));
			
			
			comments = comments + Number(post.children);
			votes = votes + Number(post.net_votes);
			
			
		}
		
		//console.log(comments);
		
		earned = earned.toFixed().toLocaleString();
		
		document.getElementById("spinner2").style.display = "none";
		document.getElementById("stats").style.display = "block";
		document.getElementById("stats").style.visibility = "visible";
				
		document.getElementById("earn-count").innerText = earned;
		
		document.getElementById("comment-count").innerText = comments.toLocaleString();;
		
		document.getElementById("vote-count").innerText = votes.toLocaleString();;
		
		//console.log(postvoters);
		
		
		a = postvoters;
		
		res = { };
		for(var i = 0; i < a.length; ++i) {
			if(!res[a[i]])
				res[a[i]] = 0;
			++res[a[i]];
		}
		
		//console.log(res);
		
		
			
		for (x in res) {
			create_item(x, res[x] + " - votes");
		}
		
		
		
	});
	
}
	
	
	
//----------

	
function byComments() {
			
			document.getElementById("stats").style.visibility = "hidden";
			document.getElementById("more-btn").style.visibility = "hidden";
			document.getElementById("spinner2").style.display = "block";
			document.getElementById("item-container").innerHTML = "";
	
	
	steem.api.getDiscussionsByAuthorBeforeDate(username, null, '2100-01-01T00:00:00', 10, function(err, result) {
		//console.log(err, result);
		
		document.getElementById("post-count").innerText = result.length;
		
		var postvoters = [];
		
		
		//console.log(post);
		
		
	
		var comments = 0;
		var earned = 0;
		var votes = 0;
		var responders = [];
		var commentors = [];
		
		result.forEach(async function(a, b, post) {
		
		
		
			var post = a;
		
			for (x in post.active_votes) {
				postvoters.push(post.active_votes[x].voter);
			}
			
			
			earned = earned + Math.max(Number(post.pending_payout_value.split(' ')[0]), Number(post.total_payout_value.split(' ')[0]) + Number(post.curator_payout_value.split(' ')[0]));
			
			
			comments = comments + Number(post.children);
			votes = votes + Number(post.net_votes);
			
		
		//console.log(post);
		
		
			var p = b;
			var q = result.length -1;
			
			await steem.api.getContentReplies(a.author, a.permlink, function(err, newresult) {
				 
				newresult = newresult.slice(0, 20);
				//console.log(newresult);
				commentors = commentors.concat(newresult);
				
				
				
				if (p == q) {
				
					var cl = commentors.length -2;
					//console.log("length: " +commentors.length);
					//console.log("end: " + cl);
					//console.log("start");
					//console.log(commentors);
					
					for (x in commentors) {
						//console.log(commentors[x].author);
						
						responders.push(commentors[x].author);
						
						//console.log(x);
						if (x == cl) {
							//console.log(responders);
							//console.log(responders);
							
							k = responders;
		
							resp = { };
							for(var i = 0; i < k.length; ++i) {
								if(!resp[k[i]])
									resp[k[i]] = 0;
								++resp[k[i]];
							}
		
			
							for (x in resp) {
								create_item(x, resp[x] + " - responses");
							}
			
						}
					
				}
					
			};
			
			
		});
		
		
		
		});
		
		earned = earned.toFixed().toLocaleString();
		
		document.getElementById("spinner2").style.display = "none";
		document.getElementById("stats").style.display = "block";
		document.getElementById("stats").style.visibility = "visible";
				
		document.getElementById("earn-count").innerText = earned;
		
		document.getElementById("comment-count").innerText = comments.toLocaleString();;
		
		document.getElementById("vote-count").innerText = votes.toLocaleString();;
		
		//console.log(postvoters);
		
		
		
	
	});

}
	
	
	
	
	byComments();
	
	
	
	
  $(document).ready(function() {
	
      $('.ui.menu .ui.dropdown').dropdown({
        on: 'hover'
      });
      $('.ui.menu a.item')
        .on('click', function() {
          $(this)
            .addClass('active')
            .siblings()
            .removeClass('active')
          ;
        });
  });
  
  
  
  var data = new Object;
  
function loadMore(element) {
	
	if(element.dataset.author == "") return;
	
	document.getElementById("stats").style.display = "none";
	document.getElementById("item-container").innerHTML = "";
		
	document.getElementById("spinner2").style.display = "block";
		
	if (element.dataset.type == "following") {
	
		
		data.following = element.dataset.account;
		data.startFollower = element.dataset.author;
		data.followType = "blog";
		data.limit = 20;
	
		//console.log(data);
		fetchFollowers(data);
	
		return;
	
	}
	
	
	data.following = element.dataset.account;
	data.startFollower = element.dataset.author;
	data.followType = "blog";
	data.limit = 20;
	
	//console.log(data);
	fetchFollowers(data);
	
	
}
  
  

  
function getFollowing() {
		
		document.getElementById("more-btn").style.visibility = "hidden";
		
		document.getElementById("stats").style.display = "none";
		
		document.getElementById("more-btn").dataset.type = "following";
		document.getElementById("more-btn").dataset.author = "";
		
		document.getElementById("spinner2").style.display = "block";
		document.getElementById("item-container").innerHTML = "";
		
	
	
		data.follower = username;
		data.startFollowing = 0;
		data.followType = "blog";
		data.limit = 20;
		
		fetchFollowing(data);
	
}  
  
    
  
function getFollowers() {
	
			
		document.getElementById("more-btn").style.visibility = "hidden";
		
		document.getElementById("stats").style.display = "none";
		
		document.getElementById("more-btn").dataset.type = "followers";
		document.getElementById("more-btn").dataset.author = "";
		
		document.getElementById("spinner2").style.display = "block";
		document.getElementById("item-container").innerHTML = "";
	
	
		data.following = username;
		data.startFollowing = 0;
		data.followType = "blog";
		data.limit = 20;
		
		fetchFollowers(data);
}




function fetchFollowers(data) {
	steem.api.getFollowers(data.following, data.startFollower, data.followType, data.limit, function(err, result) {
		//console.log(err, result);
		document.getElementById("spinner2").style.display = "none";
		document.getElementById("more-btn").style.visibility = "visible";
		var i = result.length -1;
		document.getElementById("more-btn").dataset.author = result[i].follower;
		for (x in result) {
			create_user(result[x].follower);
		}
	});
}


  

function fetchFollowing(data) {
	steem.api.getFollowing(data.follower, data.startFollowing, data.followType, data.limit, function(err, result) {
		//console.log(err, result);
		document.getElementById("spinner2").style.display = "none";
		document.getElementById("more-btn").style.visibility = "visible";
		var i = result.length -1;
		document.getElementById("more-btn").dataset.author = result[i].following;
		for (x in result) {
			create_user(result[x].following);
		}
	});
}


  
  
  
  
  
  
function create_item(account, details) {
  
  var item = document.createElement("div");
  item.className = "item";
  
  var content1 = document.createElement("div");
  content1.className = "right floated content";
  
  var btn = document.createElement("a");
  btn.className = "ui button";
  btn.innerText = "View";
  btn.href = "/@" + account;
  
  content1.appendChild(btn);
  
  var img = document.createElement("img");
  img.className = "ui avatar image";
  img.src = "https://img.busy.org/@" + account;
  img.onerror = function() {this.src='/assets/img/avatar.png'; this.onerror='';};
  
  var content2 = document.createElement("div");
  content2.className = "content";
  
  var span_account = document.createElement("span");
  span_account.innerText = account.toUpperCase();
  
  var span_details = document.createElement("span");
  span_details.className = "ui left pointing label";
  span_details.innerText = details;
  
  content2.appendChild(span_account);
  content2.appendChild(span_details);
  
  item.appendChild(content1);
  item.appendChild(img);
  item.appendChild(content2);
  
  document.getElementById("item-container").appendChild(item);
  
  
}
  
  

  
  
function create_user(account) {
  
  var item = document.createElement("div");
  item.className = "item";
  
  var content1 = document.createElement("div");
  content1.className = "right floated content";
  
  var btn = document.createElement("a");
  btn.className = "ui button";
  btn.innerText = "View";
  btn.href = "/@" + account;
  
  content1.appendChild(btn);
  
  var img = document.createElement("img");
  img.className = "ui avatar image";
  img.src = "https://img.busy.org/@" + account;
  img.onerror = function() {this.src='/assets/img/avatar.png'; this.onerror='';};
  
  var content2 = document.createElement("div");
  content2.className = "content";
  
  var span_account = document.createElement("span");
  span_account.innerText = account.toUpperCase();
  
  content2.appendChild(span_account);
  
  item.appendChild(content1);
  item.appendChild(img);
  item.appendChild(content2);
  
  document.getElementById("item-container").appendChild(item);
  
  
}
  

  

  </script>

  
  
</body>

</html>
